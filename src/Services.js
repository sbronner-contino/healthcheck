var fs = require('fs');

var Services = function() {
    // The application description - will be returned from the healthcheck endpoint
    this.applicationDescription = "This application is for demonstration purposes only!";
};

Services.prototype = {

    // Retrieves the version of the application from the package.json file
    determineVersion: function() {
        try {
            const result = fs.readFileSync('package.json');
            if (result) return JSON.parse(result.toString()).version;
        } catch (e) {
            // will return unknown
        }
        return "unknown";
    },

    // Retrieves the git revision from the revision file - this should be generated by the build
    determineRevision: function() {
        try {
            const result = fs.readFileSync('revision').toString().trim();
            if (result != '') return result;
        } catch (e) {
            // will return unknown
        }
        return "unknown";
    },

    // The "Healthcheck" endpoint handler
    handleHealthcheck: function (req, res) {
        const payload = {
            "myApplication" : [{
                "version" : this.determineVersion(),
                "revision" : this.determineRevision(),
                "description": this.applicationDescription
            }]};
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify(payload));
        res.end();
    },

    // The entrypoint endpoint handler
    requestHandler: function (req, res) {
        const [when, who, what] = [new Date().toISOString(), req.connection.remoteAddress, req.url];
        console.log(`[${ when }] - client: [${ who }] - path: [${ what }]`);
        if (what != '/healthcheck') {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.write("Not Found");
            res.end();
            return;
        }
        this.handleHealthcheck(req, res);
    }

};

module.exports = Services;
